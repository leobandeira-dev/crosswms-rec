 Exemplos de Código
 Python
import requests
import time

API_BASE = "https://crossxml.com.br/api/v2"
API_KEY = "sua_api_key_aqui"

headers = {
    "X-API-Key": API_KEY,
    "Content-Type": "application/json"
}

# Iniciar download
payload = {
    "invoice_keys": ["35250513516247000107550010000113401146202508"]
}

response = requests.post(f"{API_BASE}/download", json=payload, headers=headers)
result = response.json()

if result["success"]:
    job_id = result["job_id"]
    print(f"Download iniciado! Job ID: {job_id}")
    
    # Aguardar conclusão
    while True:
        status_response = requests.get(f"{API_BASE}/jobs/{job_id}", headers=headers)
        status = status_response.json()
        
        print(f"Status: {status['status']} - Progresso: {status['progress']}%")
        
        if status["status"] == "completed":
            print("Download concluído!")
            for result in status["results"]:
                if result["status"] == "success":
                    print(f"Arquivo: {result['filename']}")
            break
        elif status["status"] == "failed":
            print("Download falhou!")
            break
            
        time.sleep(5)
else:
    print(f"Erro: {result['message']}")
 JavaScript
const API_BASE = "https://crossxml.com.br/api/v2";
const API_KEY = "sua_api_key_aqui";

const headers = {
    "X-API-Key": API_KEY,
    "Content-Type": "application/json"
};

async function downloadXML(invoiceKeys) {
    try {
        // Iniciar download
        const response = await fetch(`${API_BASE}/download`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                invoice_keys: invoiceKeys
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log(`Download iniciado! Job ID: ${result.job_id}`);
            
            // Monitorar progresso
            const jobId = result.job_id;
            return await monitorJob(jobId);
        } else {
            throw new Error(result.message);
        }
    } catch (error) {
        console.error('Erro no download:', error);
    }
}

async function monitorJob(jobId) {
    while (true) {
        const response = await fetch(`${API_BASE}/jobs/${jobId}`, {
            headers: headers
        });
        
        const status = await response.json();
        console.log(`Status: ${status.status} - Progresso: ${status.progress}%`);
        
        if (status.status === "completed") {
            console.log("Download concluído!");
            return status.results;
        } else if (status.status === "failed") {
            throw new Error("Download falhou!");
        }
        
        await new Promise(resolve => setTimeout(resolve, 5000));
    }
}

// Uso
downloadXML(["35250513516247000107550010000113401146202508"]);